/*
 * generated by Xtext
 */
package de.beyondjava.xtext.jsf.generator

import de.beyondjava.xtext.jsf.componentLanguage.Attribute
import de.beyondjava.xtext.jsf.componentLanguage.Component
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RendererGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(Component)) {
			fsa.generateFile("net/bootsfaces/component/"+e.name.toFirstLower + "/" + e.name.toFirstUpper + "Renderer.java", e.compile)
		}
	}

	def compile(Component e) ''' 
		/**
		 *  Copyright 2014-15 by Riccardo Massera (TheCoder4.Eu) and Stephan Rauh (http://www.beyondjava.net).
		 *  
		 *  This file is part of BootsFaces.
		 *  
		 *  BootsFaces is free software: you can redistribute it and/or modify
		 *  it under the terms of the GNU Lesser General Public License as published by
		 *  the Free Software Foundation, either version 3 of the License, or
		 *  (at your option) any later version.
		 *
		 *  BootsFaces is distributed in the hope that it will be useful,
		 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
		 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		 *  GNU Lesser General Public License for more details.
		 *
		 *  You should have received a copy of the GNU Lesser General Public License
		 *  along with BootsFaces. If not, see <http://www.gnu.org/licenses/>.
		 */

		package net.bootsfaces.component.«e.name.toFirstLower»;
		
		import javax.faces.component.*;
		import java.io.IOException;
		import java.util.Map;

		import javax.faces.context.FacesContext;
		import javax.faces.context.ResponseWriter;
		import javax.faces.render.FacesRenderer;
		
		import net.bootsfaces.render.CoreRenderer;
		import net.bootsfaces.render.Tooltip;
		
		
		/** This class generates the HTML code of &lt;b:«e.name» /&gt;. */
		@FacesRenderer(componentFamily = "net.bootsfaces.component", rendererType = "net.bootsfaces.component.«e.name.toFirstLower».«e.widgetClass»")
		public class «e.widgetClass»Renderer extends CoreRenderer {
			«IF e.processesInput!=null»
			«generateDecodeMethod(e)»
			«ENDIF»
			
			
			«IF e.hasChildren!=null»
			«generateEncodeBeginMethod(e)»
			«ENDIF»
			
			«generateEncodeEndMethod(e)»
		}
			'''
	
	def generateDecodeMethod(Component e)
		'''
		    @Override
		    public void decode(FacesContext context, UIComponent component) {
		        «e.widgetClass» «e.widget» = («e.widgetClass») component;
		    
		    	«e.returnIfDisabled»
		    
		        decodeBehaviors(context, «e.widget»);
		    
		        String clientId = «e.widget».getClientId(context);
		        String submittedValue = (String) context.getExternalContext().getRequestParameterMap().get(«e.widget»);
		    
		        if (submittedValue != null) {
		        	«e.widget».setSubmittedValue(submittedValue);
		        }
		    }
		'''
	
	def getReturnIfDisabled(Component component) {
		if (component.attributes.exists[a | "disabled" == a.name])
		{
			return '''
				if («component.widget».isDisabled() || «component.widget».isReadonly()) {
				    return;
				}
			'''
		}
		""
	}
	

	def generateEncodeBeginMethod(Component e)
		'''
			@Override
			public void encodeBegin(FacesContext context, UIComponent component) throws IOException {
			    if (!component.isRendered()) {
			        return;
			    }
				«e.widgetClass» «e.widget» = («e.widgetClass») component;
				Map<String, Object> attrs = «e.widget».getAttributes();
				ResponseWriter rw = context.getResponseWriter();
				String clientId = «e.widget».getClientId();
				
				// put custom code here
			}
		'''

	def generateEncodeEndMethod(Component e)
		'''
			@Override
			public void encodeEnd(FacesContext context, UIComponent component) throws IOException {
			    if (!component.isRendered()) {
			        return;
			    }
				«e.widgetClass» «e.widget» = («e.widgetClass») component;
				Map<String, Object> attrs = «e.widget».getAttributes();
				ResponseWriter rw = context.getResponseWriter();
				String clientId = «e.widget».getClientId();

				// Simple demo widget that simply renders every attribute value
				rw.startElement("«e.widget»", «e.widget»);
				Tooltip.generateTooltip(context, attrs, rw);
				
			    «FOR f : e.attributes»
			        rw.writeAttribute("«f.name»", «parameterAsString(e, f)», "«f.name»");
			    «ENDFOR»
			    rw.writeText("Dummy content of b:«e.widgetClass»", null);
				rw.endElement("«e.widgetClass»");
			}
		'''
		
		/** Boolean parameters are rendered slightly unexpected by JSF, so it's better to pass the desired String for the sake of clarity */
		def parameterAsString(Component e, Attribute f) {
			if ("Boolean"==f.type)
				'''String.valueOf(«e.widget»«getGetter(f)»)'''
			else
				'''«e.widget»«getGetter(f)»'''
		}
		
		

		def getGetter(Attribute f)
		{ 
			if ("Boolean".equals(f.type)) {
				'''.is«f.name.toFirstUpper»()'''
			}
			else {
				'''.get«f.name.toFirstUpper»()'''
			}
		}
	
	
	def widgetClass(Component c) {
		'''«c.name.toFirstUpper»'''
	}
	
	def widget(Component c) {
		'''«c.name.toFirstLower»'''
	}
}
