/*
 * generated by Xtext
 */
package de.beyondjava.xtext.jsf.generator

import de.beyondjava.xtext.jsf.componentLanguage.Attribute
import de.beyondjava.xtext.jsf.componentLanguage.Component
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import java.util.List
import java.util.jar.Attributes
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ComponentGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(Component)) {
			fsa.generateFile("net/bootsfaces/component/"+e.name.toFirstLower + "/" +e.name.toFirstUpper + ".java", e.compile)
		}
	}

	def compile(Component e) '''
		«e.generateCopyrightHeader» 
		package net.bootsfaces.component.«e.name.toFirstLower»;
		
		import javax.faces.component.*;
		
		/** This class holds the attributes of &lt;b:«e.name» /&gt;. */
		public class «e.name.toFirstUpper» extends «parentClass(e)» {
			
			«e.generateMetadata»
			
		«e.generateProperties» 
			
		  «FOR f : e.attributes»
		    «IF f.inherited==null» 
			  	«f.generateAccessors»
		  	«ENDIF»
		  «ENDFOR»
		}
		
	'''
	
	def parentClass(Component component) {
		if (component.extends!=null) {
			return component.extends;
		}
		if (component.processesInput != null) {
			return "UIInput";
		}
		return "UIOutput";
	}

	def generateAccessors(Attribute e) '''
	
		/**
		 * «e.desc» <br />
		 * @return Returns the value of the attribute, or null, if it hasn't been set by the JSF file.
		 */
		public «e.generateAttributeType» «e.getter» {
			return («e.generateAttributeType») getStateHelper().eval(PropertyKeys.«e.name», null);
		}
		
		/**
		 * «e.desc» <br />
		 * Usually this method is called internally by the JSF engine.
		 */
		public void set«e.name.toFirstUpper»(«e.generateAttributeType» _«e.name») {
		    getStateHelper().put(PropertyKeys.«e.name», _«e.name»);
	    }
		
	'''
	
	def getGetter(Attribute f)
	{ 
		if ("boolean".equals(f.type)) {
			'''is«f.name.toFirstUpper»()'''
		}
		else {
			'''get«f.name.toFirstUpper»()'''
		}
	}

	
	def generateAttributeType(Attribute a) { 
		if (null==a.type) "String"
		else if ("Boolean".equals(a.type)) "boolean"
		else if ("Integer".equals(a.type)) "int"
		else a.type;
	}
	
	def generateMetadata(Component e) ''' 
		public static final String COMPONENT_TYPE = "net.bootsfaces.component.«e.name.toFirstUpper»";
		
		public static final String COMPONENT_FAMILY = "net.bootsfaces.component";
		
		public static final String DEFAULT_RENDERER = "net.bootsfaces.component.«e.name.toFirstUpper»";
		
		public «e.name.toFirstUpper»() {
			setRendererType(DEFAULT_RENDERER);
		}
		
		public String getFamily() {
			return COMPONENT_FAMILY;
		}
		
	'''

	def generateCopyrightHeader(Component e) '''
		/**
		 *  Copyright 2014-15 by Riccardo Massera (TheCoder4.Eu) and Stephan Rauh (http://www.beyondjava.net).
		 *  
		 *  This file is part of BootsFaces.
		 *  
		 *  BootsFaces is free software: you can redistribute it and/or modify
		 *  it under the terms of the GNU Lesser General Public License as published by
		 *  the Free Software Foundation, either version 3 of the License, or
		 *  (at your option) any later version.
		 *
		 *  BootsFaces is distributed in the hope that it will be useful,
		 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
		 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		 *  GNU Lesser General Public License for more details.
		 *
		 *  You should have received a copy of the GNU Lesser General Public License
		 *  along with BootsFaces. If not, see <http://www.gnu.org/licenses/>.
		 */

    	'''
	
	def List<Attribute> notInherited(List<Attribute> elements) {
		val result = newArrayList()
		elements.forEach[a | if (a.inherited==null) result.add(a)]
		result
		
//		var result = new ArrayList<Attribute>();
//		
//		FOR a: elements
//			result.add(a)
//		ENDFOR
//   	 	elements.get(0)
  	}
	
	def generateProperties(Component e) '''
		    protected enum PropertyKeys {
		«FOR f : e.attributes.notInherited SEPARATOR ',' AFTER ';' »
		    «IF f.inherited==null» 
		    	«f.name»
		    «ENDIF»
		«ENDFOR»
		
		
		        String toString;
		
		        PropertyKeys(String toString) {
		            this.toString = toString;
		        }
		
		        PropertyKeys() {}
		
		        public String toString() {
		            return ((this.toString != null) ? this.toString : super.toString());
		        }
		    }
	'''
}
