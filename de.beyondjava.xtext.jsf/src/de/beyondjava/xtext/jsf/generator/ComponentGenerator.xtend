/*
 * generated by Xtext
 */
package de.beyondjava.xtext.jsf.generator

import de.beyondjava.xtext.jsf.componentLanguage.Attribute
import de.beyondjava.xtext.jsf.componentLanguage.Component
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ComponentGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(Component)) {
			fsa.generateFile("net/bootsfaces/component/"+e.name.toFirstUpper + "/" +e.name.toFirstUpper + ".java", e.compile)
		}
	}

	def compile(Component e) '''
		«e.generateCopyrightHeader» 
		package net.bootsfaces.components.«e.name»;
		
		/** This class holds the attributes of &lt;b:«e.name» /&gt;. */
		public class «e.name.toFirstUpper» extends «
		parentClass(e)» {
			
			«e.generateMetadata»
			
		«e.generateProperties» 
			
		  «FOR f : e.attributes»
		  	«f.generateAccessors»
		  «ENDFOR»
		}
		
	'''
	
	def parentClass(Component component) {
		return "UIComponent";
	}

	def generateAccessors(Attribute e) '''
	
		/**
		 * «e.desc» <br />
		 * @return Returns the value of the attribute, or null, if it hasn't been set by the JSF file.
		 */
		public «e.generateAttributeType» get«e.name.toFirstUpper» () {
			return («e.generateAttributeType») getStateHelper().eval(PropertyKeys.«e.name», null);
		}
		
		/**
		 * «e.desc» <br />
		 * Usually this method is called internally by the JSF engine.
		 */
		public void set«e.name.toFirstUpper»(«e.generateAttributeType» _«e.name») {
		    getStateHelper().put(PropertyKeys.«e.name», _«e.name»);
	    }
		
	'''
	
	def generateAttributeType(Attribute a) { 
	    '''«IF a.type == null»String«ELSE»«a.type»« ENDIF»'''
	}
	
	def generateMetadata(Component e) ''' 
		public static final String COMPONENT_TYPE = "net.bootsfaces.component.«e.name.toFirstUpper»";
		
		public static final String COMPONENT_FAMILY = "net.bootsfaces.component";
		
		public static final String DEFAULT_RENDERER = "net.bootsfaces.component.«e.name.toFirstUpper»";
		
		public CommandButton() {
			setRendererType(DEFAULT_RENDERER);
		}
		
		public String getFamily() {
			return COMPONENT_FAMILY;
		}
		
	'''

	def generateCopyrightHeader(Component e) '''
		/** todo */
    	'''
	
	def generateProperties(Component e) '''
		    protected enum PropertyKeys {
		«FOR f : e.attributes SEPARATOR ',' AFTER ';' »
		     «f.name»
		«ENDFOR»
		
		
		    String toString;
		
		    PropertyKeys(String toString) {
		        this.toString = toString;
		    }
		
		    PropertyKeys() {}
		
		    public String toString() {
		        return ((this.toString != null) ? this.toString : super.toString());
		    }
	'''
}
