/*
 * generated by Xtext
 */
package de.beyondjava.xtext.jsf.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import de.beyondjava.xtext.jsf.componentLanguage.Component
import de.beyondjava.xtext.jsf.componentLanguage.Attribute

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ComponentLanguageGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(Component)) {
			fsa.generateFile(e.name, e.compile)
		}
	}

	def compile(Component e) ''' 
		  package net.bootsfaces.components.«e.name»;
		
		public class «e.name» {
		  «FOR f : e.attributes»
		  	«f.compile»
		  «ENDFOR»
		}
	'''

	def compile(Attribute e) ''' 
		public «e.type» get«e.name.toFirstUpper» () {
			return «e.name»;
		}
	'''

//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
//	}
}
